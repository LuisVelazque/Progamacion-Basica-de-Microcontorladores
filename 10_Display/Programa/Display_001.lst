CCS PCM C Compiler, Version 5.015, 5967               18-mar.-22 17:56

               Filename:   C:\Users\donke\OneDrive\Escritorio\Micro c\10_Diplay\Programa\Display_001.lst

               ROM used:   130 words (2%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           17 (5%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16f877a.h>      
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOPUT, NOLVP, NOPROTECT, BROWNOUT 
.................... #use delay(clock=20M)  
0004:  MOVLW  2B
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #use fast_io(B) 
.................... #define pulsadorASC PIN_A0 // se define el pulsador que incrementa 
.................... #define pulsadorDSC PIN_A1 // se define el pulsador que decrementa 
....................  
.................... int display [10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};  
*
0023:  MOVLW  3F
0024:  BCF    03.5
0025:  MOVWF  20
0026:  MOVLW  06
0027:  MOVWF  21
0028:  MOVLW  5B
0029:  MOVWF  22
002A:  MOVLW  4F
002B:  MOVWF  23
002C:  MOVLW  66
002D:  MOVWF  24
002E:  MOVLW  6D
002F:  MOVWF  25
0030:  MOVLW  7D
0031:  MOVWF  26
0032:  MOVLW  07
0033:  MOVWF  27
0034:  MOVLW  7F
0035:  MOVWF  28
0036:  MOVLW  6F
0037:  MOVWF  29
.................... int contador; 
....................  
.................... void main () 
*
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  BSF    03.5
001C:  BSF    1F.0
001D:  BSF    1F.1
001E:  BSF    1F.2
001F:  BCF    1F.3
0020:  MOVLW  07
0021:  MOVWF  1C
0022:  BCF    03.7
.................... { 
....................    set_tris_b(0b00000000); // inicia en cero 
*
0038:  MOVLW  00
0039:  BSF    03.5
003A:  MOVWF  06
....................    output_b(0b00000000); 
003B:  BCF    03.5
003C:  CLRF   06
....................     
....................    while(true) 
....................    { 
....................     
....................       if(input(pulsadorASC)==1) 
003D:  BSF    03.5
003E:  BSF    05.0
003F:  BCF    03.5
0040:  BTFSS  05.0
0041:  GOTO   05F
....................         { 
....................          
....................          while(input(pulsadorASC) == 1); //Impide un doble contacto del pulsador 
0042:  BSF    03.5
0043:  BSF    05.0
0044:  BCF    03.5
0045:  BTFSC  05.0
0046:  GOTO   042
....................             delay_ms(2); 
0047:  MOVLW  02
0048:  MOVWF  2B
0049:  CALL   004
....................              
....................             contador++; // se incrementa el contador 
004A:  INCF   2A,F
....................             output_b(display[contador]); // se muestra en el display 
004B:  MOVLW  20
004C:  ADDWF  2A,W
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  MOVWF  2B
0051:  MOVWF  06
....................           
....................                if(contador > 9)  // Si en contador es mayor a 9 
0052:  MOVF   2A,W
0053:  SUBLW  09
0054:  BTFSC  03.0
0055:  GOTO   05F
....................                { 
....................                   contador = 9;  // se queda en 9 
0056:  MOVLW  09
0057:  MOVWF  2A
....................                   output_b(display[contador]); // se muestra en display 
0058:  MOVLW  20
0059:  ADDWF  2A,W
005A:  MOVWF  04
005B:  BCF    03.7
005C:  MOVF   00,W
005D:  MOVWF  2B
005E:  MOVWF  06
....................                } 
....................          } 
....................        
....................       if(input(pulsadorDSC) == 1) 
005F:  BSF    03.5
0060:  BSF    05.1
0061:  BCF    03.5
0062:  BTFSS  05.1
0063:  GOTO   080
....................       { 
....................        
....................          while(input(pulsadorDSC) == 1); //Impide un doble contacto del pulsador 
0064:  BSF    03.5
0065:  BSF    05.1
0066:  BCF    03.5
0067:  BTFSC  05.1
0068:  GOTO   064
....................             delay_ms(2); 
0069:  MOVLW  02
006A:  MOVWF  2B
006B:  CALL   004
....................              
....................             contador--; // se decrementa el contador 
006C:  DECF   2A,F
....................             output_b(display[contador]); // se muestra en el display 
006D:  MOVLW  20
006E:  ADDWF  2A,W
006F:  MOVWF  04
0070:  BCF    03.7
0071:  MOVF   00,W
0072:  MOVWF  2B
0073:  MOVWF  06
....................           
....................                if(contador == -1) //si el contador es igual a menos 1 
0074:  MOVF   2A,W
0075:  SUBLW  FF
0076:  BTFSS  03.2
0077:  GOTO   080
....................                { 
....................                   contador = 0; // el contador se queda en cero 
0078:  CLRF   2A
....................                   output_b(display[contador]); // y se muestra en el display 
0079:  MOVLW  20
007A:  ADDWF  2A,W
007B:  MOVWF  04
007C:  BCF    03.7
007D:  MOVF   00,W
007E:  MOVWF  2B
007F:  MOVWF  06
....................                } 
....................       } 
0080:  GOTO   03D
....................    } 
.................... } 
....................  
0081:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
