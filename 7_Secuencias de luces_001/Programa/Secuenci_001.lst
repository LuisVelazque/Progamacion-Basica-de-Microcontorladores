CCS PCM C Compiler, Version 5.015, 5967               17-mar.-22 10:33

               Filename:   C:\Users\donke\OneDrive\Escritorio\Micro c\7_Secuencias de luces_001\Programa\Secuenci_001.lst

               ROM used:   106 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <16f877a.h>      
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses HS, NOWDT, NOPUT, NOLVP, NOPROTECT, BROWNOUT 
.................... #use delay(clock=20M)  
0004:  MOVLW  21
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  06
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  7B
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... #use fast_io(B) 
.................... int tiempo = 1000;  
....................  
.................... void main () 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  MOVLW  E8
001C:  MOVWF  20
001D:  BSF    03.5
001E:  BSF    1F.0
001F:  BSF    1F.1
0020:  BSF    1F.2
0021:  BCF    1F.3
0022:  MOVLW  07
0023:  MOVWF  1C
0024:  BCF    03.7
.................... { 
....................    set_tris_b(0b00000000); 
0025:  MOVLW  00
0026:  MOVWF  06
....................    output_b(0b00000000); 
0027:  BCF    03.5
0028:  CLRF   06
....................     
....................    while(true) 
....................    { 
....................       output_d(0b10000001); 
0029:  BSF    03.5
002A:  CLRF   08
002B:  MOVLW  81
002C:  BCF    03.5
002D:  MOVWF  08
....................       delay_ms(tiempo); 
002E:  MOVF   20,W
002F:  MOVWF  21
0030:  CALL   004
....................       output_d(0b01000010); 
0031:  BSF    03.5
0032:  CLRF   08
0033:  MOVLW  42
0034:  BCF    03.5
0035:  MOVWF  08
....................       delay_ms(tiempo); 
0036:  MOVF   20,W
0037:  MOVWF  21
0038:  CALL   004
....................       output_d(0b00100100); 
0039:  BSF    03.5
003A:  CLRF   08
003B:  MOVLW  24
003C:  BCF    03.5
003D:  MOVWF  08
....................       delay_ms(tiempo); 
003E:  MOVF   20,W
003F:  MOVWF  21
0040:  CALL   004
....................       output_d(0b00011000); 
0041:  BSF    03.5
0042:  CLRF   08
0043:  MOVLW  18
0044:  BCF    03.5
0045:  MOVWF  08
....................       delay_ms(tiempo); 
0046:  MOVF   20,W
0047:  MOVWF  21
0048:  CALL   004
....................       output_d(0b00100100); 
0049:  BSF    03.5
004A:  CLRF   08
004B:  MOVLW  24
004C:  BCF    03.5
004D:  MOVWF  08
....................       delay_ms(tiempo); 
004E:  MOVF   20,W
004F:  MOVWF  21
0050:  CALL   004
....................       output_d(0b01000010); 
0051:  BSF    03.5
0052:  CLRF   08
0053:  MOVLW  42
0054:  BCF    03.5
0055:  MOVWF  08
....................       delay_ms(tiempo); 
0056:  MOVF   20,W
0057:  MOVWF  21
0058:  CALL   004
....................       output_d(0b10000001); 
0059:  BSF    03.5
005A:  CLRF   08
005B:  MOVLW  81
005C:  BCF    03.5
005D:  MOVWF  08
....................       delay_ms(tiempo); 
005E:  MOVF   20,W
005F:  MOVWF  21
0060:  CALL   004
....................       output_d(0b0000000); 
0061:  BSF    03.5
0062:  CLRF   08
0063:  BCF    03.5
0064:  CLRF   08
....................       delay_ms(tiempo); 
0065:  MOVF   20,W
0066:  MOVWF  21
0067:  CALL   004
0068:  GOTO   029
....................     } 
.................... } 
....................  
0069:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
